call pathogen#infect()
call pathogen#helptags()

let python_highlight_all = 1
filetype plugin indent on
syntax on
set background=light
set number

let &titlestring = @%
set title

" I have a habit of saving excessively and the swp files just annoy me. 
set nobackup
set noswapfile

set nohlsearch

set grepprg=grep\ -nH\ $*

" Rebind redo key
map <F7> :redo <CR>

" Macro to compile current LaTeX file.
map <F8> :call CompileFile() <CR>
function! CompileFile()
	let current_filetype = &filetype
	if current_filetype == 'python'
		:!python %:t
	endif
endfunction

function! ToggleSpellCheck()
	set spell!
	if &spell
		echo "Spellcheck ON"
	else
		echo "Spellcheck OFF"
	endif
endfunction

" Default is relative numbering.
set rnu
set nonumber

" Space toggles method folding
" nnoremap <space> za

" Easy tab navigation
map <C-t>j :tabc<cr>
map <C-t>h :tabp<cr>
map <C-t>l :tabn<cr>

" NERDTree configuration
map <C-r> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
let NERDTreeIgnore = ['\.pyc$']
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Syntastic navigation shortcuts 
let mapleader = ","
nmap <leader>h :lnext<CR>
nmap <leader>l :lprevious<CR>
function! ToggleErrors()
	let old_last_winnr = winnr('$')
	lclose
	if old_last_winnr == winnr('$')
		Errors
	endif
endfunction
nnoremap <leader>e :call ToggleErrors()<CR> 

" Rebind delete to have a no copy version.
nnoremap <leader>d "_d

" Toggle line numbers
nnoremap <leader>w :set relativenumber!<CR>

nnoremap <leader>* :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>

" Toggle tagbar
nmap <leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 0 

" Toggle indentation display
nmap <leader>i :IndentGuidesToggle<CR>
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=darkgrey

" Auto tabularize dictionaries and equal signs
nmap <leader>= :Tabularize /=<CR>
nmap <leader>; :Tabularize /:<CR>

" Limelight settings.
let g:limelight_conceal_ctermfg = 'gray'
function! ToggleFocusMode()
	Goyo
	Limelight!!
endfunction

" Toggle focus mode.
nmap <leader>f :call ToggleFocusMode()<CR>
let g:goyo_width = 85

" Toggle spell check in current file.
map <leader>c :call ToggleSpellCheck()<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Vim closetag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml, *.txt, *.vue"

""""""""""""""
" CTRLP fuzzy finder
" Ignore what is in the gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
  \}
let g:ctrlp_prompt_mappings = { 'PrtExit()': ['<esc>', '<c-c>', '<c-g>', '<space>'] }
let g:ctrlp_map = '<c-f>'
let g:ctrlp_cmd = 'CtrlP'
nmap <space>a :CtrlPBuffer<cr>
nmap <space>m :CtrlPMixed<cr>
nmap <space>s :CtrlPMRU<cr>
" Buffer settings in vim
set hidden
" Move to the next buffer
nmap <space>j :bnext<CR>
" Move to the previous buffer
nmap <space>k :bprevious<CR>
" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <space>x :bp <BAR> bd #<CR>
" Close all but the current tab
nmap <space>q :%bd<BAR>e#<CR>
" Show all open buffers and their status
nmap <space>l :ls<CR>
""""""""""""""

" Typescript vim
let g:typescript_indent_disable = 1


"" Because I can't figure out my pasting situation.
set pastetoggle=<F2>

let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'

let g:tmux_navigator_save_on_switch = 2

""""""""""""""
" Snipets
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
""""""""""""""

""""""""""""""
" Python Beautifier
let g:autopep8_disable_show_diff=1
let g:autoflake_disable_show_diff=1
let g:autoflake_remove_all_unused_imports=1

" If there are N formatting things in the Beautify() function there needs to
" be N + 1 <CR> commands after the call.
nmap <leader>b :call Beautify()<CR><CR><CR><CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""



function Beautify()
  :w
  :Autopep8
  :w
  :!isort %
  :w
  :!autoflake --in-place --remove-all-unused-imports %
  :edit!
  :w
endfunction




autocmd BufNewFile,BufRead *.py call SetPythonOptions()
function SetPythonOptions()
	set tabstop=4
	set softtabstop=4
	set shiftwidth=4
	set expandtab
	set textwidth=79
	set autoindent
	set fileformat=unix
	set nospell
  map <leader>e oimport ipdb; ipdb.set_trace()<C-c>
endfunction

"" Function to delete trailing whitespace
func! DeleteTrailingWS()
	exe "normal mz"
	%s/\s\+$//ge
	exe "normal `z"
endfunc

"""""""
"" All read, write, open settings are below here.
"""""""

"" Defaults
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent
set nospell


"" Delete trailing whitespace on python, ruby file save
autocmd BufWrite *.py,*.rb :call DeleteTrailingWS()


" Options for Scala
autocmd BufNewFile,BufRead *.scala call SetScalaOptions()
function SetScalaOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set wrap
	set expandtab
	set autoindent
	set textwidth=79
  set wrapmargin=2
endfunction

" Options for Java
autocmd BufNewFile,BufRead *.java call SetJavaOptions()
function SetJavaOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set wrap
	set expandtab
	set autoindent
	set textwidth=79
  set wrapmargin=2
endfunction

" Options for LaTex
autocmd BufNewFile,BufRead *.tex call SetTexOptions()
function SetTexOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set expandtab
	set autoindent
	set textwidth=79
	set nospell
endfunction

" Options for full stack. 
autocmd BufNewFile,BufRead *.js,*.ts,*.html,*.css,*.vue,*.php call SetWebOptions()
function SetWebOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set textwidth=79
	set wrap
	set expandtab
	set autoindent
	set nospell
endfunction

" Options for C++,C, CUDA
autocmd BufNewFile,BufRead *.cpp,*.h,*.c,*.cu,*.cuh call SetCOptions()
function SetCOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set textwidth=79
	set expandtab
	set autoindent
	set fileformat=unix
	set nospell
endfunction

autocmd BufRead,BufNewFile *.txt call SetTextOptions()
function SetTextOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set textwidth=79
	set wrap
	set expandtab
	set autoindent
	set nospell
endfunction

autocmd BufRead,BufNewFile *.md call SetMdOptions()
function SetMdOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set textwidth=79
	set expandtab
	set autoindent
	set nospell
endfunction


autocmd BufRead,BufNewFile *.cmd call SetCmdOptions()
function SetCmdOptions()
	set syntax=sh
endfunction



""""""""""""""""'

