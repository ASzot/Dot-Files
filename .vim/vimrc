call pathogen#infect()
call pathogen#helptags()

let python_highlight_all = 1
filetype plugin indent on
syntax on
set background=light
set number
let mapleader = ","

" To automatically reload the file on external changes
set autoread
au CursorHold * checktime

let &titlestring = @%
set title

" I have a habit of saving excessively and the swp files just annoy me. 
set nobackup
set noswapfile

set nohlsearch

set grepprg=grep\ -nH\ $*

" For some keyboards this is necessary
set backspace=indent,eol,start

" Rebind redo key
map <F7> :redo <CR>

" Change copy and paste to sync with the system clipboard.
set clipboard^=unnamed

" Better wild card matching in the tab window
set wildmode=longest,list,full

" Macro to compile current LaTeX file.
map <F8> :call CompileFile() <CR>
function! CompileFile()
	let current_filetype = &filetype
	if current_filetype == 'python'
		:!python %:t
  elseif current_filetype == 'tex'
    :!pdflatex main.tex
	endif
endfunction

function! ToggleSpellCheck()
	set spell!
	if &spell
		echo "Spellcheck ON"
	else
		echo "Spellcheck OFF"
	endif
endfunction

" NERDTree configuration
 map <C-r> :NERDTreeToggle<CR>
 " autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
 " autocmd StdinReadPre * let s:std_in=1
 " autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
 let NERDTreeIgnore = ['\.pyc$']
 let NERDTreeMinimalUI = 1
 let NERDTreeDirArrows = 1

" Set default to be  relative numbering. 
set rnu
set nonumber

" Unfold by default
au BufRead * normal zR

" Rebind delete to have a no copy version.
nnoremap <leader>d "_d

"function! RefreshConfig()
"  :w
"  :so ~/.vim/vimrc
"endfunction
"
"" Reload config
"nnoremap <leader>v :call RefreshConfig()<CR>

" Toggle line numbers
nnoremap <leader>w :set relativenumber!<CR>

" Find and replace 
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
" Find and replace across multiple files
function FindReplaceMultiFile()
  "let find = input('Find: ')
  let find = expand("<cword>")
  let replace = input('Replace: ')

  execute "vimgrep /" . find . "/gj **/*.yaml **/*.py" 
  :copen
  execute "cfdo %s/" . find . "/" . replace . "/gc"
endfunction
nnoremap <leader>& :call FindReplaceMultiFile()<CR>

" Toggle indentation display
nmap <leader>i :IndentGuidesToggle<CR>
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=black
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=darkgrey

" Auto tabularize dictionaries and equal signs
nmap <leader>= :Tabularize /=<CR>
nmap <leader>; :Tabularize /:<CR>

" ctags 
nmap <leader>y :!ctags -R --exclude=.git . <CR>

" Limelight settings.
"let g:limelight_conceal_ctermfg = 'gray'
function! ToggleFocusMode()
	"Goyo
  Goyo "120x100%"
	"Limelight!!
  "set background=light
endfunction

" Toggle focus mode.
nmap <leader>f :call ToggleFocusMode()<CR>
" let g:goyo_width = 120
"let g:goyo_height = "100%"

" Toggle spell check in current file.
map <leader>c :call ToggleSpellCheck()<CR>

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

" Vim closetag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml, *.txt, *.vue"

""""""""""""""
" FZF settings
set rtp+=~/.fzf
nmap <c-f> :Files<CR>
nmap <Space>a :Buffers<CR>
nmap <Space>f :Ag<Space>
nmap <Space>t :Ag<Space>(^\%\@).*
" Remove the '!' if you don't want this to open up a new window. 
noremap <Space>e :Ag! <C-r>=expand('<cword>')<CR><CR>
imap <c-x><c-f> <plug>(fzf-complete-path)
let g:fzf_layout = {'down':'30'}

set hidden
""""""""""""""


" Typescript vim
let g:typescript_indent_disable = 1


"" Because I can't figure out my pasting situation.
set pastetoggle=<F2>

let g:tex_flavor='latex'
let g:livepreview_previewer = 'open -a Skim'
let g:livepreview_cursorhold_recompile = 0
set conceallevel=2
let g:tex_conceal='abdmg'
hi clear Conceal
let g:tex_comment_nospell=1

let g:tmux_navigator_save_on_switch = 2

syntax match braket /\\bra/ conceal cchar=<

""""""""""""""
" Snipets
let g:UltiSnipsExpandTrigger = '<tab>'

let g:UltiSnipsJumpForwardTrigger = '<tab>'
nmap <leader>u :put =system('echo \\label{$RANDOM}')<CR>
""""""""""""""

""""""""""""""
" Golang
""""""""""""""


""""""""""""""
" Toggle tagbar
nmap <leader>t :TagbarOpen fj<CR>
let g:tagbar_autofocus = 0 
let g:tagbar_position = 'leftabove'
let g:tagbar_left = 1
""""""""""""""

let g:ale_enabled=1

let g:highlighting = 0
function! Highlighting()
  if g:highlighting == 1 && @/ =~ '^\\<'.expand('<cword>').'\\>$'
    let g:highlighting = 0
    set nohlsearch
    return ":silent nohlsearch\<CR>"
  endif
  let @/ = '\<'.expand('<cword>').'\>'
  let g:highlighting = 1
  return ":silent set hlsearch\<CR>"
endfunction
nnoremap <silent> <expr> <CR> Highlighting()

function Beautify()
  :w
  :!isort %
  :w
  :!python -m black %
  :w
  :!autoflake --in-place --expand-star-imports --ignore-init-module-imports --exclude docs/ %
  :edit!
  :w
endfunction


""""""""""""""
" Python Beautifier
let g:autopep8_disable_show_diff=1
let g:autoflake_disable_show_diff=1
let g:autoflake_remove_all_unused_imports=1

" If there are N formatting things in the Beautify() function there needs to
" be N + 1 <CR> commands after the call.
"nmap <leader>b :call Beautify()<CR><CR><CR><CR>
""""""""""""""

""""""""""""""
" Python Jedi 
autocmd FileType python setlocal completeopt-=preview
let g:jedi#show_call_signatures = "0"
let g:jedi#usages_command = ""
""""""""""""""

""""""""""""""
" Vim markdown
let g:vim_markdown_toc_autofit = 1
""""""""""""""

" Options for Python
autocmd BufNewFile,BufRead *.py call SetPythonOptions()
function SetPythonOptions()
	set tabstop=4
	set softtabstop=4
	set shiftwidth=4
	set expandtab
	set textwidth=79
	set autoindent
	set fileformat=unix
	set nospell

  set formatoptions-=t

  map <leader>e oimport ipdb; ipdb.set_trace()<C-c>
  let b:ale_linters = ['pylint']
  let g:ale_set_highlights = 0
  let b:ale_warn_about_trailing_whitespace = 0
  let g:ale_python_pylint_options="--errors-only --disable=E1101,import-error"
  " To run linters only on save.
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_lint_on_insert_leave = 0
  let g:ale_lint_on_enter = 0

  let b:ale_fixers = ['black', 'isort']
  let b:ale_fix_on_save = 1

  nmap <silent> <leader>p <Plug>(ale_previous_wrap)
  nmap <silent> <leader>n <Plug>(ale_next_wrap)
  " Create the tags output directory
  :silent exec "!mkdir -p ~/.tags/`pwd`"
  " Override the python ctags setup
  nmap <leader>y :!ctags -R -f ~/.tags/`pwd`/tags --fields=+l --languages=python --python-kinds=-iv --exclude=.git --exclude=.mypy_cache `pwd` <CR>
  set tags=~/.tags/$PWD/tags
endfunction

function FixTwoSpaces()
  set ts=2 sts=2 noet
  retab!
  set ts=4 sts=4 et
  retab
endfunction

"" Function to delete trailing whitespace
func! DeleteTrailingWS()
	exe "normal mz"
	%s/\s\+$//ge
	exe "normal `z"

  " if filereadable(join([getcwd(), "/tags"], "/"))
  "   :silent !ctags -R .
  " endif
endfunc

"""""""
"" All read, write, open settings are below here.
"""""""

"" Defaults
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set autoindent
set nospell
syn match UrlNoSpell "\w\+:\/\/[^[:space:]]\+" contains=@NoSpell


"" Delete trailing whitespace on python, ruby file save
autocmd BufWrite *.py,*.rb :call DeleteTrailingWS()

" Options for LaTex
autocmd BufNewFile,BufRead *.tex call SetTexOptions()
function SetTexOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set expandtab
	set autoindent
	set textwidth=0
  set linebreak
	set nospell
  map <leader>r O%R: 
  let g:ale_enabled=0
  hi Error NONE
  nnoremap j gj
  nnoremap k gk
  set wrap linebreak nolist
  set nonumber
  set norelativenumber
endfunction


autocmd BufNewFile,BufRead *.sh call SetBashOptions()
function SetBashOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set expandtab
	set autoindent
	set textwidth=0
  set linebreak
	set nospell
endfunction


autocmd BufRead,BufNewFile *.cmd call SetCmdOptions()
function SetCmdOptions()
	set syntax=sh
  call SetBashOptions()
endfunction

if fnamemodify(getcwd(), ':t') == "me"
  let g:lastfilename = "START"
  "These define all the options for my Vim Wiki 
  "autocmd BufEnter *.tex call WikiOptions()
  noremap <silent> <Space>r :call WikiOptions()<CR>
  noremap <silent> <Space>v :LLPStartPreview<CR>
  set textwidth=79
  set wrapmargin=2
	set wrap
  let g:ale_enabled=0
  function WikiOptions()
    if match(readfile(expand("%:p")),"begin{document}")==-1
      return
    endif 
    if g:lastfilename == expand("%:t")
      return
    endif
    let g:lastfilename = expand("%:t")

    hi Error NONE
    " Make sure we are ready to render this file. 
    silent! !osascript -e 'tell application "Skim" to close first window'
    redraw!
    :LLPStartPreview
  endfunction
endif



" Options for Scala
autocmd BufNewFile,BufRead *.scala call SetScalaOptions()
function SetScalaOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set wrap
	set expandtab
	set autoindent
	set textwidth=79
  set wrapmargin=2
endfunction

" Options for Java
autocmd BufNewFile,BufRead *.java call SetJavaOptions()
function SetJavaOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set wrap
	set expandtab
	set autoindent
	set textwidth=79
  set wrapmargin=2
endfunction

" Options for full stack. 
autocmd BufNewFile,BufRead *.js,*.ts,*.html,*.css,*.vue,*.php call SetWebOptions()
function SetWebOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set textwidth=79
	set wrap
	set expandtab
	set autoindent
	set nospell
endfunction

" Options for C++,C, CUDA
autocmd BufNewFile,BufRead *.cpp,*.h,*.c,*.cu,*.cuh call SetCOptions()
function SetCOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set textwidth=79
	set expandtab
	set autoindent
	set fileformat=unix
	set nospell
endfunction

" Options for txt, TextFiles
autocmd BufRead,BufNewFile *.txt call SetTextOptions()
function SetTextOptions()
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set textwidth=79
	set wrap
	set expandtab
	set autoindent
	set nospell
endfunction


" Options for markdown, md 
autocmd BufRead,BufNewFile *.md call SetMdOptions()
function SetMdOptions()
  setf markdown
	set tabstop=2
	set softtabstop=2
	set shiftwidth=2
	set expandtab
	set autoindent
	set nospell
  nmap <leader>t :Toc<CR>
	set textwidth=0
  nnoremap j gj
  nnoremap k gk
  set wrap linebreak nolist
  set nonumber
  set norelativenumber
endfunction





""""""""""""""""'

let g:go_version_warning = 0
